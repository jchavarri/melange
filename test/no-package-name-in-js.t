Set up a few directories we'll need

  $ mkdir -p lib
  $ mkdir -p app
  $ mkdir -p output/lib
  $ mkdir -p output/app

  $ echo "let t = 1" > lib/a.ml
  $ echo "let t = A.t" > app/b.ml

If we don't have a package name, melc should allow not passing one

  $ cd lib/

Can't `-bs-module-type` and `-bs-package-output`

  $ melc -bs-module-type es6 -bs-package-output lib/ -bs-stop-after-cmj -nopervasives a.ml
  Can't pass both `-bs-package-output` and `-bs-module-type`
  [2]

Now compile for real

  $ melc -bs-package-output lib/ -bs-stop-after-cmj -nopervasives a.ml
  $ cd -
  $TESTCASE_ROOT

  $ cd app/
  $ melc -bs-package-output app/ -I ../lib b.ml -nopervasives -bs-stop-after-cmj
  $ cd -
  $TESTCASE_ROOT

The linking step doesn't need `package-name`

Just used for the module system and extension in this phase

  $ cd output/lib
  $ melc -bs-package-output commonjs:./lib:.js -nopervasives ../../lib/a.cmj -o a.js
  $ cd -
  $TESTCASE_ROOT

  $ cd output/app/
  $ melc -bs-package-output commonjs:./app:.js -nopervasives -I ../../lib ../../app/b.cmj -o b.js
  $ cd -
  $TESTCASE_ROOT

B depends on A, so it should import a.js in the right path

  $ cat output/app/b.js
  // Generated by Melange
  'use strict';
  
  var A = require("../lib/a.js");
  
  var t = A.t;
  
  exports.t = t;
  /* No side effect */
