Set up a few directories we'll need

  $ mkdir -p lib
  $ mkdir -p app
  $ mkdir -p lib/.objs/melange
  $ mkdir -p app/.objs/melange
  $ mkdir -p output/lib
  $ mkdir -p output/app

  $ echo "let t = 1" > lib/a.ml
  $ echo "let t = A.t" > app/b.ml

Build cmjs

  $ melc -bs-stop-after-cmj -nopervasives lib/a.ml -o lib/.objs/melange/a.cmj

  $ melc -I lib/.objs/melange -bs-stop-after-cmj -nopervasives app/b.ml -o app/.objs/melange/b.cmj

Linking step

  $ melc -bs-package-output lib/ -nopervasives lib/.objs/melange/a.cmj -o output/lib/a.js

If we don't pass the -I flag to the folder where the dependency .js files are placed, it will fail

  $ melc -bs-package-output app/ -nopervasives -I lib/.objs/melange app/.objs/melange/b.cmj -o output/app/b.js
  File "jscomp/common/bs_exception.ml", line 40, characters 16-33
  File "jscomp/core/js_name_of_module_id.ml", line 180, characters 22-63
  File "jscomp/core/js_dump_program.ml", line 78, characters 13-103
  File "jscomp/ext/ext_list.ml", line 31, characters 15-19
  File "jscomp/core/js_dump_program.ml", line 76, characters 6-198
  File "jscomp/core/js_dump_program.ml", line 121, characters 18-66
  File "jscomp/ext/ext_pervasives.ml", line 28, characters 8-11
  File "jscomp/ext/ext_pervasives.ml", line 31, characters 6-15
  File "jscomp/main/melc.ml", line 240, characters 22-49
  File "jscomp/main/melc.ml", line 506, characters 4-44
  File "_none_", line 1:
  Error: a.js not found, needed in script mode 
  [2]

Passing `-I output/lib` fixes it

  $ melc -bs-package-output app/ -nopervasives -I lib/.objs/melange -I output/lib app/.objs/melange/b.cmj -o output/app/b.js

B depends on A, so it should import a.js in the right path

  $ cat output/app/b.js
  // Generated by Melange
  'use strict';
  
  var A = require("../lib/a.js");
  
  var t = A.t;
  
  exports.t = t;
  /* No side effect */
